import { CategoryRequestOptions, CategoryResponse, FeaturesRequestOptions, FeaturesResponse, FormulaRequestOptions, FormulaResponse, HistogramRequestOptions, HistogramResponse, RangeRequestOptions, RangeResponse, ScatterRequestOptions, ScatterResponse, TableRequestOptions, TableResponse, TimeSeriesRequestOptions, TimeSeriesResponse, ViewState } from './types.js';
import { FilterLogicalOperator, Filter, SpatialFilter } from '../types.js';
import { ModelSource } from '../models/model.js';
import { SourceOptions } from '../sources/index.js';
import { ApiVersion } from '../constants.js';
export interface WidgetBaseSourceProps extends Omit<SourceOptions, 'filters'> {
    apiVersion?: ApiVersion;
    filters?: Record<string, Filter>;
    filtersLogicalOperator?: FilterLogicalOperator;
}
export type WidgetSource = WidgetBaseSource<WidgetBaseSourceProps>;
/**
 * Source for Widget API requests on a data source defined by a SQL query.
 *
 * Abstract class. Use {@link WidgetQuerySource} or {@link WidgetTableSource}.
 */
export declare abstract class WidgetBaseSource<Props extends WidgetBaseSourceProps> {
    readonly props: Props;
    static defaultProps: Partial<WidgetBaseSourceProps>;
    constructor(props: Props);
    /**
     * Subclasses of {@link WidgetBaseSource} must implement this method, calling
     * {@link WidgetBaseSource.prototype._getModelSource} for common source
     * properties, and adding additional required properties including 'type' and
     * 'data'.
     */
    protected abstract getModelSource(owner: string | undefined): ModelSource;
    protected _getModelSource(owner?: string): Omit<ModelSource, 'type' | 'data'>;
    protected _getSpatialFiltersResolution(source: Omit<ModelSource, 'type' | 'data'>, spatialFilter?: SpatialFilter, referenceViewState?: ViewState): number | undefined;
    /****************************************************************************
     * CATEGORIES
     */
    /**
     * Returns a list of labeled datapoints for categorical data. Suitable for
     * charts including grouped bar charts, pie charts, and tree charts.
     */
    getCategories(options: CategoryRequestOptions): Promise<CategoryResponse>;
    /****************************************************************************
     * FEATURES
     */
    /**
     * Given a list of feature IDs (as found in `_carto_feature_id`) returns all
     * matching features. In datasets containing features with duplicate geometries,
     * feature IDs may be duplicated (IDs are a hash of geometry) and so more
     * results may be returned than IDs in the request.
     * @internal
     * @experimental
     */
    getFeatures(options: FeaturesRequestOptions): Promise<FeaturesResponse>;
    /****************************************************************************
     * FORMULA
     */
    /**
     * Returns a scalar numerical statistic over all matching data. Suitable
     * for 'headline' or 'scorecard' figures such as counts and sums.
     */
    getFormula(options: FormulaRequestOptions): Promise<FormulaResponse>;
    /****************************************************************************
     * HISTOGRAM
     */
    /**
     * Returns a list of labeled datapoints for 'bins' of data defined as ticks
     * over a numerical range. Suitable for histogram charts.
     */
    getHistogram(options: HistogramRequestOptions): Promise<HistogramResponse>;
    /****************************************************************************
     * RANGE
     */
    /**
     * Returns a range (min and max) for a numerical column of matching rows.
     * Suitable for displaying certain 'headline' or 'scorecard' statistics,
     * or rendering a range slider UI for filtering.
     */
    getRange(options: RangeRequestOptions): Promise<RangeResponse>;
    /****************************************************************************
     * SCATTER
     */
    /**
     * Returns a list of bivariate datapoints defined as numerical 'x' and 'y'
     * values. Suitable for rendering scatter plots.
     */
    getScatter(options: ScatterRequestOptions): Promise<ScatterResponse>;
    /****************************************************************************
     * TABLE
     */
    /**
     * Returns a list of arbitrary data rows, with support for pagination and
     * sorting. Suitable for displaying tables and lists.
     */
    getTable(options: TableRequestOptions): Promise<TableResponse>;
    /****************************************************************************
     * TIME SERIES
     */
    /**
     * Returns a series of labeled numerical values, grouped into equally-sized
     * time intervals. Suitable for rendering time series charts.
     */
    getTimeSeries(options: TimeSeriesRequestOptions): Promise<TimeSeriesResponse>;
}
