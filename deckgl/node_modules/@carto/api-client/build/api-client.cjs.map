{"version":3,"file":"api-client.cjs","sources":["../src/client.ts","../src/constants.ts","../src/utils.ts","../src/filters.ts","../src/geo.ts","../src/constants-internal.ts","../src/api/endpoints.ts","../src/api/carto-api-error.ts","../src/api/request-with-parameters.ts","../src/sources/base-source.ts","../src/sources/boundary-query-source.ts","../src/sources/boundary-table-source.ts","../src/models/common.ts","../src/models/model.ts","../src/spatial-index.ts","../src/widget-sources/widget-base-source.ts","../src/widget-sources/widget-query-source.ts","../src/widget-sources/widget-table-source.ts","../src/sources/h3-query-source.ts","../src/sources/h3-table-source.ts","../src/sources/h3-tileset-source.ts","../src/sources/raster-source.ts","../src/sources/quadbin-query-source.ts","../src/sources/quadbin-table-source.ts","../src/sources/quadbin-tileset-source.ts","../src/sources/vector-query-source.ts","../src/sources/vector-table-source.ts","../src/sources/vector-tileset-source.ts","../src/api/query.ts"],"sourcesContent":["/**\n * @internal\n * @internalRemarks Source: @carto/react-core, @carto/constants, @deck.gl/carto\n */\nlet client = 'deck-gl-carto';\n\n/**\n * Returns current client ID, used to categorize API requests. For internal use only.\n *\n * @internal\n * @internalRemarks Source: @carto/react-core\n */\nexport function getClient() {\n  return client;\n}\n\n/**\n * Sets current client ID, used to categorize API requests. For internal use only.\n *\n * @internal\n * @internalRemarks Source: @carto/react-core\n */\nexport function setClient(c: string) {\n  client = c;\n}\n","/**\n * Defines a comparator used when matching a column's values against given filter values.\n *\n * Example:\n *\n * ```javascript\n * import { FilterType } from '@carto/api-client';\n * const filters = {\n *   column_name: { [FilterType.IN]: { values: ['a', 'b', 'c'] } }\n * };\n * ```\n *\n * @internalRemarks Source: @carto/react-api, @deck.gl/carto\n */\nexport enum FilterType {\n  IN = 'in',\n  /** [a, b] both are included. */\n  BETWEEN = 'between',\n  /** [a, b) a is included, b is not. */\n  CLOSED_OPEN = 'closed_open',\n  TIME = 'time',\n  STRING_SEARCH = 'stringSearch',\n}\n\n/** @internalRemarks Source: @carto/constants */\nexport enum ApiVersion {\n  V1 = 'v1',\n  V2 = 'v2',\n  V3 = 'v3',\n}\n\n/** @internalRemarks Source: @carto/constants, @deck.gl/carto */\nexport const DEFAULT_API_BASE_URL = 'https://gcp-us-east1.api.carto.com';\n","import {Filter} from './types.js';\nimport {FilterType} from './constants.js';\n\nconst FILTER_TYPES = new Set(Object.values(FilterType));\nconst isFilterType = (type: string): type is FilterType =>\n  FILTER_TYPES.has(type as FilterType);\n\n/**\n * @privateRemarks Source: @carto/react-widgets\n * @internal\n */\nexport function getApplicableFilters(\n  owner?: string,\n  filters?: Record<string, Filter>\n): Record<string, Filter> {\n  if (!filters) return {};\n\n  const applicableFilters: Record<string, Filter> = {};\n\n  for (const column in filters) {\n    for (const type in filters[column]) {\n      if (!isFilterType(type)) continue;\n\n      const filter = filters[column][type];\n      const isApplicable = !owner || !filter?.owner || filter?.owner !== owner;\n      if (filter && isApplicable) {\n        applicableFilters[column] ||= {};\n        (applicableFilters[column][type] as typeof filter) = filter;\n      }\n    }\n  }\n\n  return applicableFilters;\n}\n\ntype Row<T> = Record<string, T> | Record<string, T>[] | T[] | T;\n\n/**\n * Due to each data warehouse having its own behavior with columns,\n * we need to normalize them and transform every key to lowercase.\n *\n * @internalRemarks Source: @carto/react-widgets\n * @internal\n */\nexport function normalizeObjectKeys<T, R extends Row<T>>(el: R): R {\n  if (Array.isArray(el)) {\n    return el.map((value) => normalizeObjectKeys(value)) as R;\n  } else if (typeof el !== 'object') {\n    return el;\n  }\n\n  return Object.entries(el as Record<string, T>).reduce(\n    (acc, [key, value]) => {\n      acc[key.toLowerCase()] =\n        typeof value === 'object' && value ? normalizeObjectKeys(value) : value;\n      return acc;\n    },\n    {} as Record<string, T>\n  ) as R;\n}\n\n/** @internalRemarks Source: @carto/react-core */\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\n/**\n * @internalRemarks Source: @carto/react-core\n * @internal\n */\nexport class InvalidColumnError extends Error {\n  protected static readonly NAME = 'InvalidColumnError';\n\n  constructor(message: string) {\n    super(`${InvalidColumnError.NAME}: ${message}`);\n    this.name = InvalidColumnError.NAME;\n  }\n\n  static is(error: unknown) {\n    return (\n      error instanceof InvalidColumnError ||\n      (error as Error).message?.includes(InvalidColumnError.NAME)\n    );\n  }\n}\n\nexport function isEmptyObject(object: object): boolean {\n  for (const _ in object) {\n    return false;\n  }\n  return true;\n}\n\n/** @internal */\nexport const isObject: (x: unknown) => boolean = (x) =>\n  x !== null && typeof x === 'object';\n\n/** @internal */\nexport const isPureObject: (x: any) => boolean = (x) =>\n  isObject(x) && x.constructor === {}.constructor;\n","import {FilterType} from './constants';\nimport {Filter} from './types';\nimport {isEmptyObject} from './utils';\n\ntype FilterTypeOptions<T extends FilterType> = {\n  type: T;\n  column: string;\n} & Filter[T];\n\nexport type AddFilterOptions =\n  | FilterTypeOptions<FilterType.IN>\n  | FilterTypeOptions<FilterType.BETWEEN>\n  | FilterTypeOptions<FilterType.CLOSED_OPEN>\n  | FilterTypeOptions<FilterType.TIME>\n  | FilterTypeOptions<FilterType.STRING_SEARCH>;\n\n/**\n * Adds a {@link Filter} to the filter set. Any previous filters with the same\n * `column` and `type` will be replaced.\n */\nexport function addFilter(\n  filters: Record<string, Filter>,\n  {column, type, values, owner}: AddFilterOptions\n): Record<string, Filter> {\n  if (!filters[column]) {\n    filters[column] = {};\n  }\n\n  const filter = {values, owner} as FilterTypeOptions<typeof type>;\n  (filters[column][type] as FilterTypeOptions<typeof type>) = filter;\n\n  return filters;\n}\n\nexport type RemoveFilterOptions = {\n  column: string;\n  owner?: string;\n};\n\n/**\n * Removes one or more {@link Filter filters} from the filter set. If only\n * `column` is specified, then all filters on that column are removed. If both\n * `column` and `owner` are specified, then only filters for that column\n * associated with the owner are removed.\n */\nexport function removeFilter(\n  filters: Record<string, Filter>,\n  {column, owner}: RemoveFilterOptions\n): Record<string, Filter> {\n  const filter = filters[column];\n  if (!filter) {\n    return filters;\n  }\n\n  if (owner) {\n    for (const type of Object.values(FilterType)) {\n      if (owner === filter[type as FilterType]?.owner) {\n        delete filter[type as FilterType];\n      }\n    }\n  }\n\n  if (!owner || isEmptyObject(filter)) {\n    delete filters[column];\n  }\n\n  return filters;\n}\n\n/**\n * Clears all {@link Filter filters} from the filter set.\n */\nexport function clearFilters(\n  filters: Record<string, Filter>\n): Record<string, Filter> {\n  for (const column of Object.keys(filters)) {\n    delete filters[column];\n  }\n  return filters;\n}\n\nexport type HasFilterOptions = {\n  column: string;\n  owner?: string;\n};\n\nexport function hasFilter(\n  filters: Record<string, Filter>,\n  {column, owner}: HasFilterOptions\n): boolean {\n  const filter = filters[column];\n  if (!filter) {\n    return false;\n  }\n\n  if (!owner) {\n    return true;\n  }\n\n  for (const type of Object.values(FilterType)) {\n    if (owner === filter[type as FilterType]?.owner) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport type GetFilterOptions<T extends FilterType> = {\n  column: string;\n  type: T;\n  owner?: string;\n};\n\nexport function getFilter<T extends FilterType>(\n  filters: Record<string, Filter>,\n  {column, type, owner}: GetFilterOptions<T>\n): Filter[T] | null {\n  const filter = filters[column];\n  if (!filter) {\n    return null;\n  }\n\n  if (!owner || owner === filter[type as FilterType]?.owner) {\n    return filter[type] || null;\n  }\n\n  return null;\n}\n","import bboxClip from '@turf/bbox-clip';\nimport bboxPolygon from '@turf/bbox-polygon';\nimport union from '@turf/union';\nimport {getType} from '@turf/invariant';\nimport {polygon, multiPolygon, feature, featureCollection} from '@turf/helpers';\nimport type {BBox, Geometry, MultiPolygon, Polygon, Position} from 'geojson';\nimport {SpatialFilter} from './types';\n\n/**\n * Returns a {@link SpatialFilter} for a given viewport, typically obtained\n * from deck.gl's `viewport.getBounds()` method ([west, south, east, north]).\n * If the viewport covers the entire world (to some margin of error in Web\n * Mercator space), `undefined` is returned instead.\n *\n * If the viewport extends beyond longitude range [-180, +180], the polygon\n * may be reformatted for compatibility with CARTO APIs.\n */\nexport function createViewportSpatialFilter(\n  viewport: BBox\n): SpatialFilter | undefined {\n  if (_isGlobalViewport(viewport)) {\n    return;\n  }\n  return createPolygonSpatialFilter(bboxPolygon(viewport).geometry);\n}\n\n/**\n * Returns a {@link SpatialFilter} for a given {@link Polygon} or\n * {@link MultiPolygon}. If the polygon(s) extend outside longitude\n * range [-180, +180], the result may be reformatted for compatibility\n * with CARTO APIs.\n */\nexport function createPolygonSpatialFilter(\n  spatialFilter: Polygon | MultiPolygon\n): SpatialFilter | undefined {\n  return (spatialFilter && _normalizeGeometry(spatialFilter)) || undefined;\n}\n\n/**\n * Check if a viewport is large enough to represent a global coverage.\n * In this case the spatial filter parameter for widget calculation is removed.\n *\n * @internalRemarks Source: @carto/react-core\n */\nfunction _isGlobalViewport(viewport: BBox) {\n  const [minx, miny, maxx, maxy] = viewport;\n  return maxx - minx > 179.5 * 2 && maxy - miny > 85.05 * 2;\n}\n\n/**\n * Normalized a geometry, coming from a mask or a viewport. The parts\n * spanning outside longitude range [-180, +180] are clipped and \"folded\"\n * back to the valid range and unioned to the polygons inide that range.\n *\n * It results in a Polygon or MultiPolygon strictly inside the validity range.\n *\n * @internalRemarks Source: @carto/react-core\n */\nfunction _normalizeGeometry(\n  geometry: Polygon | MultiPolygon\n): Polygon | MultiPolygon | null {\n  const WORLD = [-180, -90, +180, +90] as BBox;\n  const worldClip = _clean(\n    bboxClip(geometry, WORLD).geometry as Polygon | MultiPolygon\n  );\n\n  const geometryTxWest = _tx(geometry, 360);\n  const geometryTxEast = _tx(geometry, -360);\n\n  let result: Polygon | MultiPolygon | null = worldClip;\n\n  if (result && geometryTxWest) {\n    const worldWestClip = _clean(\n      bboxClip(geometryTxWest, WORLD).geometry as Polygon | MultiPolygon\n    );\n    if (worldWestClip) {\n      const collection = featureCollection([\n        feature(result),\n        feature(worldWestClip),\n      ]);\n      const merged = union(collection);\n      result = merged ? _clean(merged.geometry) : result;\n    }\n  }\n\n  if (result && geometryTxEast) {\n    const worldEastClip = _clean(\n      bboxClip(geometryTxEast, WORLD).geometry as Polygon | MultiPolygon\n    );\n    if (worldEastClip) {\n      const collection = featureCollection([\n        feature(result),\n        feature(worldEastClip),\n      ]);\n      const merged = union(collection);\n      result = merged ? _clean(merged.geometry) : result;\n    }\n  }\n\n  return result;\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _cleanPolygonCoords(cc: Position[][]) {\n  const coords = cc.filter((c) => c.length > 0);\n  return coords.length > 0 ? coords : null;\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _cleanMultiPolygonCoords(ccc: Position[][][]) {\n  const coords = ccc.map(_cleanPolygonCoords).filter((cc) => cc);\n  return coords.length > 0 ? coords : null;\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _clean(\n  geometry: Polygon | MultiPolygon | null\n): Polygon | MultiPolygon | null {\n  if (!geometry) {\n    return null;\n  }\n\n  if (_isPolygon(geometry)) {\n    const coords = _cleanPolygonCoords((geometry as Polygon).coordinates);\n    return coords ? polygon(coords).geometry : null;\n  }\n\n  if (_isMultiPolygon(geometry)) {\n    const coords = _cleanMultiPolygonCoords(\n      (geometry as MultiPolygon).coordinates\n    );\n    return coords ? multiPolygon(coords as Position[][][]).geometry : null;\n  }\n\n  return null;\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _txContourCoords(cc: Position[], distance: number) {\n  return cc.map((c) => [c[0] + distance, c[1]]);\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _txPolygonCoords(ccc: Position[][], distance: number) {\n  return ccc.map((cc) => _txContourCoords(cc, distance));\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _txMultiPolygonCoords(cccc: Position[][][], distance: number) {\n  return cccc.map((ccc) => _txPolygonCoords(ccc, distance));\n}\n\n/** @internalRemarks Source: @carto/react-core */\nfunction _tx(geometry: Polygon | MultiPolygon, distance: number) {\n  if (geometry && getType(geometry) === 'Polygon') {\n    const coords = _txPolygonCoords(\n      (geometry as Polygon).coordinates,\n      distance\n    );\n    return polygon(coords).geometry;\n  } else if (geometry && getType(geometry) === 'MultiPolygon') {\n    const coords = _txMultiPolygonCoords(\n      (geometry as MultiPolygon).coordinates,\n      distance\n    );\n    return multiPolygon(coords).geometry;\n  } else {\n    return null;\n  }\n}\n\nfunction _isPolygon(geometry: Geometry): geometry is Polygon {\n  return getType(geometry) === 'Polygon';\n}\n\nfunction _isMultiPolygon(geometry: Geometry): geometry is MultiPolygon {\n  return getType(geometry) === 'MultiPolygon';\n}\n","/**\n * Current version of @carto/api-client.\n * @internal\n */\nexport const API_CLIENT_VERSION = __CARTO_API_CLIENT_VERSION;\n\n/** @internal */\nexport const V3_MINOR_VERSION = '3.4';\n\n/** @internalRemarks Source: @carto/constants, @deck.gl/carto */\nexport const DEFAULT_GEO_COLUMN = 'geom';\n\n/**\n * Fastly default limit is 8192; leave some padding.\n * @internalRemarks Source: @deck.gl/carto\n */\nexport const DEFAULT_MAX_LENGTH_URL = 7000;\n\n/** @internalRemarks Source: @deck.gl/carto */\nexport const DEFAULT_TILE_RESOLUTION = 0.5;\n\n/**\n * @internalRemarks Source: @deck.gl/carto\n * @internal\n */\nexport const DEFAULT_AGGREGATION_RES_LEVEL_H3 = 4;\n\n/**\n * @internalRemarks Source: @deck.gl/carto\n * @internal\n */\nexport const DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN = 6;\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {MapType} from '../types.js';\n\nexport type V3Endpoint = 'maps' | 'stats' | 'sql';\n\nfunction joinPath(...args: string[]): string {\n  return args\n    .map((part) => (part.endsWith('/') ? part.slice(0, -1) : part))\n    .join('/');\n}\n\nfunction buildV3Path(\n  apiBaseUrl: string,\n  version: 'v3',\n  endpoint: V3Endpoint,\n  ...rest: string[]\n): string {\n  return joinPath(apiBaseUrl, version, endpoint, ...rest);\n}\n\n/** @internal Required by fetchMap(). */\nexport function buildPublicMapUrl({\n  apiBaseUrl,\n  cartoMapId,\n}: {\n  apiBaseUrl: string;\n  cartoMapId: string;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'maps', 'public', cartoMapId);\n}\n\n/** @internal Required by fetchMap(). */\nexport function buildStatsUrl({\n  attribute,\n  apiBaseUrl,\n  connectionName,\n  source,\n  type,\n}: {\n  attribute: string;\n  apiBaseUrl: string;\n  connectionName: string;\n  source: string;\n  type: MapType;\n}): string {\n  if (type === 'query') {\n    return buildV3Path(apiBaseUrl, 'v3', 'stats', connectionName, attribute);\n  }\n\n  // type === 'table'\n  return buildV3Path(\n    apiBaseUrl,\n    'v3',\n    'stats',\n    connectionName,\n    source,\n    attribute\n  );\n}\n\nexport function buildSourceUrl({\n  apiBaseUrl,\n  connectionName,\n  endpoint,\n}: {\n  apiBaseUrl: string;\n  connectionName: string;\n  endpoint: MapType;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'maps', connectionName, endpoint);\n}\n\nexport function buildQueryUrl({\n  apiBaseUrl,\n  connectionName,\n}: {\n  apiBaseUrl: string;\n  connectionName: string;\n}): string {\n  return buildV3Path(apiBaseUrl, 'v3', 'sql', connectionName, 'query');\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {MapType} from '../types';\n\nexport type APIRequestType =\n  | 'Map data'\n  | 'Map instantiation'\n  | 'Public map'\n  | 'Tile stats'\n  | 'SQL'\n  | 'Basemap style';\n\nexport type APIErrorContext = {\n  requestType: APIRequestType;\n  mapId?: string;\n  connection?: string;\n  source?: string;\n  type?: MapType;\n};\n\n/**\n *\n * Custom error for reported errors in CARTO Maps API.\n * Provides useful debugging information in console and context for applications.\n *\n */\nexport class CartoAPIError extends Error {\n  /** Source error from server */\n  error: Error;\n\n  /** Context (API call & parameters) in which error occured */\n  errorContext: APIErrorContext;\n\n  /** Response from server */\n  response?: Response;\n\n  /** JSON Response from server */\n  responseJson?: any;\n\n  constructor(\n    error: Error,\n    errorContext: APIErrorContext,\n    response?: Response,\n    responseJson?: any\n  ) {\n    let responseString = 'Failed to connect';\n    if (response) {\n      responseString = 'Server returned: ';\n      if (response.status === 400) {\n        responseString += 'Bad request';\n      } else if (response.status === 401 || response.status === 403) {\n        responseString += 'Unauthorized access';\n      } else if (response.status === 404) {\n        responseString += 'Not found';\n      } else {\n        responseString += 'Error';\n      }\n\n      responseString += ` (${response.status}):`;\n    }\n    responseString += ` ${error.message || error}`;\n\n    let message = `${errorContext.requestType} API request failed`;\n    message += `\\n${responseString}`;\n    for (const key of Object.keys(errorContext)) {\n      if (key === 'requestType') continue;\n      message += `\\n${formatErrorKey(key)}: ${(errorContext as any)[key]}`;\n    }\n    message += '\\n';\n\n    super(message);\n\n    this.name = 'CartoAPIError';\n    this.response = response;\n    this.responseJson = responseJson;\n    this.error = error;\n    this.errorContext = errorContext;\n  }\n}\n\n/**\n * Converts camelCase to Camel Case\n */\nfunction formatErrorKey(key: string) {\n  return key.replace(/([A-Z])/g, ' $1').replace(/^./, (s) => s.toUpperCase());\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {isPureObject} from '../utils';\nimport {CartoAPIError, APIErrorContext} from './carto-api-error';\nimport {V3_MINOR_VERSION} from '../constants-internal';\nimport {DEFAULT_MAX_LENGTH_URL} from '../constants-internal';\nimport {getClient} from '../client';\nimport {LocalCacheOptions} from '../sources/types';\n\nconst DEFAULT_HEADERS = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n};\n\nconst DEFAULT_REQUEST_CACHE = new Map<string, Promise<unknown>>();\n\nexport async function requestWithParameters<T = any>({\n  baseUrl,\n  parameters = {},\n  headers: customHeaders = {},\n  errorContext,\n  maxLengthURL = DEFAULT_MAX_LENGTH_URL,\n  localCache,\n}: {\n  baseUrl: string;\n  parameters?: Record<string, unknown>;\n  headers?: Record<string, string>;\n  errorContext: APIErrorContext;\n  maxLengthURL?: number;\n  localCache?: LocalCacheOptions;\n}): Promise<T> {\n  // Parameters added to all requests issued with `requestWithParameters()`.\n  // These parameters override parameters already in the base URL, but not\n  // user-provided parameters.\n  parameters = {\n    v: V3_MINOR_VERSION,\n    client: getClient(),\n    ...(typeof deck !== 'undefined' &&\n      deck.VERSION && {deckglVersion: deck.VERSION}),\n    ...parameters,\n  };\n\n  baseUrl = excludeURLParameters(baseUrl, Object.keys(parameters));\n  const key = createCacheKey(baseUrl, parameters, customHeaders);\n\n  const {\n    cache: REQUEST_CACHE,\n    canReadCache,\n    canStoreInCache,\n  } = getCacheSettings(localCache);\n\n  if (canReadCache && REQUEST_CACHE.has(key)) {\n    return REQUEST_CACHE.get(key) as Promise<T>;\n  }\n\n  const url = createURLWithParameters(baseUrl, parameters);\n  const headers = {...DEFAULT_HEADERS, ...customHeaders};\n\n  /* global fetch */\n  const fetchPromise =\n    url.length > maxLengthURL\n      ? fetch(baseUrl, {\n          method: 'POST',\n          body: JSON.stringify(parameters),\n          headers,\n        })\n      : fetch(url, {headers});\n\n  let response: Response | undefined;\n  let responseJson: unknown;\n  const jsonPromise: Promise<T> = fetchPromise\n    .then((_response: Response) => {\n      response = _response;\n      return response.json();\n    })\n    .then((json: any) => {\n      responseJson = json;\n      if (!response || !response.ok) {\n        throw new Error(json.error);\n      }\n      return json;\n    })\n    .catch((error: Error) => {\n      if (canStoreInCache) {\n        REQUEST_CACHE.delete(key);\n      }\n      throw new CartoAPIError(error, errorContext, response, responseJson);\n    });\n\n  if (canStoreInCache) {\n    REQUEST_CACHE.set(key, jsonPromise);\n  }\n  return jsonPromise;\n}\n\nfunction getCacheSettings(localCache: LocalCacheOptions | undefined) {\n  const canReadCache = localCache?.cacheControl?.includes('no-cache')\n    ? false\n    : true;\n  const canStoreInCache = localCache?.cacheControl?.includes('no-store')\n    ? false\n    : true;\n  const cache = localCache?.cache || DEFAULT_REQUEST_CACHE;\n\n  return {\n    cache,\n    canReadCache,\n    canStoreInCache,\n  };\n}\n\nfunction createCacheKey(\n  baseUrl: string,\n  parameters: Record<string, unknown>,\n  headers: Record<string, string>\n): string {\n  const parameterEntries = Object.entries(parameters).sort(([a], [b]) =>\n    a > b ? 1 : -1\n  );\n  const headerEntries = Object.entries(headers).sort(([a], [b]) =>\n    a > b ? 1 : -1\n  );\n  return JSON.stringify({\n    baseUrl,\n    parameters: parameterEntries,\n    headers: headerEntries,\n  });\n}\n\n/**\n * Appends query string parameters to a URL. Existing URL parameters are kept,\n * unless there is a conflict, in which case the new parameters override\n * those already in the URL.\n */\nfunction createURLWithParameters(\n  baseUrlString: string,\n  parameters: Record<string, unknown>\n): string {\n  const baseUrl = new URL(baseUrlString);\n  for (const [key, value] of Object.entries(parameters)) {\n    if (isPureObject(value) || Array.isArray(value)) {\n      baseUrl.searchParams.set(key, JSON.stringify(value));\n    } else {\n      baseUrl.searchParams.set(\n        key,\n        (value as string | boolean | number).toString()\n      );\n    }\n  }\n  return baseUrl.toString();\n}\n\n/**\n * Deletes query string parameters from a URL.\n */\nfunction excludeURLParameters(baseUrlString: string, parameters: string[]) {\n  const baseUrl = new URL(baseUrlString);\n  for (const param of parameters) {\n    if (baseUrl.searchParams.has(param)) {\n      baseUrl.searchParams.delete(param);\n    }\n  }\n  return baseUrl.toString();\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {DEFAULT_API_BASE_URL} from '../constants';\nimport {DEFAULT_MAX_LENGTH_URL} from '../constants-internal';\nimport {buildSourceUrl} from '../api/endpoints';\nimport {requestWithParameters} from '../api/request-with-parameters';\nimport type {\n  GeojsonResult,\n  JsonResult,\n  SourceOptionalOptions,\n  SourceRequiredOptions,\n  TilejsonMapInstantiation,\n  TilejsonResult,\n} from './types';\nimport {MapType} from '../types';\nimport {APIErrorContext} from '../api';\nimport {getClient} from '../client';\n\nexport const SOURCE_DEFAULTS: SourceOptionalOptions = {\n  apiBaseUrl: DEFAULT_API_BASE_URL,\n  clientId: getClient(),\n  format: 'tilejson',\n  headers: {},\n  maxLengthURL: DEFAULT_MAX_LENGTH_URL,\n};\n\nexport async function baseSource<UrlParameters extends Record<string, unknown>>(\n  endpoint: MapType,\n  options: Partial<SourceOptionalOptions> & SourceRequiredOptions,\n  urlParameters: UrlParameters\n): Promise<TilejsonResult | GeojsonResult | JsonResult> {\n  const {accessToken, connectionName, cache, ...optionalOptions} = options;\n  const mergedOptions = {\n    ...SOURCE_DEFAULTS,\n    accessToken,\n    connectionName,\n    endpoint,\n  };\n  for (const key in optionalOptions) {\n    if (optionalOptions[key as keyof typeof optionalOptions]) {\n      (mergedOptions as any)[key] =\n        optionalOptions[key as keyof typeof optionalOptions];\n    }\n  }\n  const baseUrl = buildSourceUrl(mergedOptions);\n  const {clientId, maxLengthURL, format, localCache} = mergedOptions;\n  const headers = {\n    Authorization: `Bearer ${options.accessToken}`,\n    ...options.headers,\n  };\n  const parameters = {client: clientId, ...urlParameters};\n\n  const errorContext: APIErrorContext = {\n    requestType: 'Map instantiation',\n    connection: options.connectionName,\n    type: endpoint,\n    source: JSON.stringify(parameters, undefined, 2),\n  };\n  const mapInstantiation =\n    await requestWithParameters<TilejsonMapInstantiation>({\n      baseUrl,\n      parameters,\n      headers,\n      errorContext,\n      maxLengthURL,\n      localCache,\n    });\n\n  const dataUrl = mapInstantiation[format].url[0];\n  if (cache) {\n    cache.value = parseInt(\n      new URL(dataUrl).searchParams.get('cache') || '',\n      10\n    );\n  }\n  errorContext.requestType = 'Map data';\n\n  if (format === 'tilejson') {\n    const json = await requestWithParameters<TilejsonResult>({\n      baseUrl: dataUrl,\n      headers,\n      errorContext,\n      maxLengthURL,\n      localCache,\n    });\n    if (accessToken) {\n      json.accessToken = accessToken;\n    }\n    return json;\n  }\n\n  return await requestWithParameters<GeojsonResult | JsonResult>({\n    baseUrl: dataUrl,\n    headers,\n    errorContext,\n    maxLengthURL,\n    localCache,\n  });\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {QueryParameters} from '../types.js';\nimport {baseSource} from './base-source';\nimport type {FilterOptions, SourceOptions, TilejsonResult} from './types';\n\nexport type BoundaryQuerySourceOptions = SourceOptions &\n  FilterOptions & {\n    columns?: string[];\n    tilesetTableName: string;\n    propertiesSqlQuery: string;\n    queryParameters?: QueryParameters;\n  };\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  tilesetTableName: string;\n  propertiesSqlQuery: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n};\n\nexport type BoundaryQuerySourceResponse = TilejsonResult;\n\nexport const boundaryQuerySource = async function (\n  options: BoundaryQuerySourceOptions\n): Promise<BoundaryQuerySourceResponse> {\n  const {\n    columns,\n    filters,\n    tilesetTableName,\n    propertiesSqlQuery,\n    queryParameters,\n  } = options;\n  const urlParameters: UrlParameters = {\n    tilesetTableName,\n    propertiesSqlQuery,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n\n  return baseSource<UrlParameters>(\n    'boundary',\n    options,\n    urlParameters\n  ) as Promise<BoundaryQuerySourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source';\nimport type {FilterOptions, SourceOptions, TilejsonResult} from './types';\n\nexport type BoundaryTableSourceOptions = SourceOptions &\n  FilterOptions & {\n    tilesetTableName: string;\n    columns?: string[];\n    propertiesTableName: string;\n  };\ntype UrlParameters = {\n  filters?: Record<string, unknown>;\n  tilesetTableName: string;\n  columns?: string;\n  propertiesTableName: string;\n};\n\nexport type BoundaryTableSourceResponse = TilejsonResult;\n\nexport const boundaryTableSource = async function (\n  options: BoundaryTableSourceOptions\n): Promise<BoundaryTableSourceResponse> {\n  const {filters, tilesetTableName, columns, propertiesTableName} = options;\n  const urlParameters: UrlParameters = {\n    tilesetTableName,\n    propertiesTableName,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>(\n    'boundary',\n    options,\n    urlParameters\n  ) as Promise<BoundaryTableSourceResponse>;\n};\n","import {InvalidColumnError} from '../utils.js';\n\n/** @internalRemarks Source: @carto/react-api */\nexport interface ModelRequestOptions {\n  method: 'GET' | 'POST';\n  abortController?: AbortController;\n  otherOptions?: Record<string, unknown>;\n  body?: string;\n}\n\ninterface ModelErrorResponse {\n  error?: string | string[];\n  hint?: string;\n  column_name?: string;\n}\n\n/**\n * Return more descriptive error from API\n * @internalRemarks Source: @carto/react-api\n */\nexport function dealWithApiError({\n  response,\n  data,\n}: {\n  response: Response;\n  data: ModelErrorResponse;\n}) {\n  if (data.error === 'Column not found') {\n    throw new InvalidColumnError(`${data.error} ${data.column_name}`);\n  }\n\n  if (\n    typeof data.error === 'string' &&\n    data.error?.includes('Missing columns')\n  ) {\n    throw new InvalidColumnError(data.error);\n  }\n\n  switch (response.status) {\n    case 401:\n      throw new Error('Unauthorized access. Invalid credentials');\n    case 403:\n      throw new Error('Forbidden access to the requested data');\n    default:\n      const msg =\n        data && data.error && typeof data.error === 'string'\n          ? data.error\n          : JSON.stringify(data?.hint || data.error?.[0]);\n      throw new Error(msg);\n  }\n}\n\n/** @internalRemarks Source: @carto/react-api */\nexport async function makeCall({\n  url,\n  accessToken,\n  opts,\n}: {\n  url: string;\n  accessToken: string;\n  opts: ModelRequestOptions;\n}) {\n  let response;\n  let data;\n  const isPost = opts?.method === 'POST';\n  try {\n    response = await fetch(url.toString(), {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        ...(isPost && {'Content-Type': 'application/json'}),\n      },\n      ...(isPost && {\n        method: opts?.method,\n        body: opts?.body,\n      }),\n      signal: opts?.abortController?.signal,\n      ...opts?.otherOptions,\n    });\n    data = await response.json();\n  } catch (error) {\n    if ((error as Error).name === 'AbortError') throw error;\n\n    throw new Error(`Failed request: ${error}`);\n  }\n\n  if (!response.ok) {\n    dealWithApiError({response, data});\n  }\n\n  return data;\n}\n","import {DEFAULT_GEO_COLUMN} from '../constants-internal.js';\nimport {\n  Filter,\n  FilterLogicalOperator,\n  MapType,\n  QueryParameters,\n  SpatialFilter,\n} from '../types.js';\nimport {$TODO} from '../types-internal.js';\nimport {assert, isPureObject} from '../utils.js';\nimport {ModelRequestOptions, makeCall} from './common.js';\nimport {ApiVersion} from '../constants.js';\nimport {SpatialDataType, SpatialFilterPolyfillMode} from '../sources/types.js';\n\n/** @internalRemarks Source: @carto/react-api */\nconst AVAILABLE_MODELS = [\n  'category',\n  'histogram',\n  'formula',\n  'pick',\n  'timeseries',\n  'range',\n  'scatterplot',\n  'table',\n] as const;\n\nexport type Model = (typeof AVAILABLE_MODELS)[number];\n\nexport interface ModelSource {\n  type: MapType;\n  apiVersion: ApiVersion;\n  apiBaseUrl: string;\n  accessToken: string;\n  clientId: string;\n  connectionName: string;\n  data: string;\n  filters?: Record<string, Filter>;\n  filtersLogicalOperator?: FilterLogicalOperator;\n  spatialFilter?: SpatialFilter;\n  queryParameters?: QueryParameters;\n  spatialDataColumn?: string;\n  spatialDataType?: SpatialDataType;\n  spatialFiltersResolution?: number;\n  spatialFiltersMode?: SpatialFilterPolyfillMode;\n  /** original resolution of the spatial index data as stored in the DW */\n  dataResolution?: number;\n}\n\nconst {V3} = ApiVersion;\nconst REQUEST_GET_MAX_URL_LENGTH = 2048;\n\n/**\n * Execute a SQL model request.\n * @internalRemarks Source: @carto/react-api\n */\nexport function executeModel(props: {\n  model: Model;\n  source: ModelSource;\n  params: Record<string, unknown>;\n  opts?: Partial<ModelRequestOptions>;\n}) {\n  assert(props.source, 'executeModel: missing source');\n  assert(props.model, 'executeModel: missing model');\n  assert(props.params, 'executeModel: missing params');\n\n  assert(\n    AVAILABLE_MODELS.includes(props.model),\n    `executeModel: model provided isn't valid. Available models: ${AVAILABLE_MODELS.join(\n      ', '\n    )}`\n  );\n\n  const {model, source, params, opts} = props;\n  const {type, apiVersion, apiBaseUrl, accessToken, connectionName, clientId} =\n    source;\n\n  assert(apiBaseUrl, 'executeModel: missing apiBaseUrl');\n  assert(accessToken, 'executeModel: missing accessToken');\n  assert(apiVersion === V3, 'executeModel: SQL Model API requires CARTO 3+');\n  assert(type !== 'tileset', 'executeModel: Tilesets not supported');\n\n  let url = `${apiBaseUrl}/v3/sql/${connectionName}/model/${model}`;\n\n  const {\n    data,\n    filters,\n    filtersLogicalOperator = 'and',\n    spatialDataType = 'geo',\n    spatialFiltersMode = 'intersects',\n    spatialFiltersResolution = 0,\n  } = source;\n\n  const queryParams: Record<string, unknown> = {\n    type,\n    client: clientId,\n    source: data,\n    params,\n    queryParameters: source.queryParameters || '',\n    filters,\n    filtersLogicalOperator,\n  };\n\n  const spatialDataColumn = source.spatialDataColumn || DEFAULT_GEO_COLUMN;\n\n  // Picking Model API requires 'spatialDataColumn'.\n  if (model === 'pick') {\n    queryParams.spatialDataColumn = spatialDataColumn;\n  }\n\n  // API supports multiple filters, we apply it only to spatialDataColumn\n  const spatialFilters = source.spatialFilter\n    ? {[spatialDataColumn]: source.spatialFilter}\n    : undefined;\n\n  if (spatialFilters) {\n    queryParams.spatialFilters = spatialFilters;\n    queryParams.spatialDataColumn = spatialDataColumn;\n    queryParams.spatialDataType = spatialDataType;\n  }\n\n  if (spatialDataType !== 'geo') {\n    if (spatialFiltersResolution > 0) {\n      queryParams.spatialFiltersResolution = spatialFiltersResolution;\n    }\n    queryParams.spatialFiltersMode = spatialFiltersMode;\n  }\n\n  const urlWithSearchParams =\n    url + '?' + objectToURLSearchParams(queryParams).toString();\n  const isGet = urlWithSearchParams.length <= REQUEST_GET_MAX_URL_LENGTH;\n  if (isGet) {\n    url = urlWithSearchParams;\n  }\n  return makeCall({\n    url,\n    accessToken: source.accessToken,\n    opts: {\n      ...opts,\n      method: isGet ? 'GET' : 'POST',\n      ...(!isGet && {body: JSON.stringify(queryParams)}),\n    },\n  });\n}\n\nfunction objectToURLSearchParams(object: Record<string, unknown>) {\n  const params = new URLSearchParams();\n  for (const key in object) {\n    if (isPureObject(object[key])) {\n      params.append(key, JSON.stringify(object[key]));\n    } else if (Array.isArray(object[key])) {\n      params.append(key, JSON.stringify(object[key]));\n    } else if (object[key] === null) {\n      params.append(key, 'null');\n    } else if (object[key] !== undefined) {\n      params.append(key, String(object[key]));\n    }\n  }\n  return params;\n}\n","import {\n  DEFAULT_AGGREGATION_RES_LEVEL_H3,\n  DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN,\n} from './constants-internal';\nimport type {ModelSource} from './models/model';\nimport type {AggregationOptions} from './sources/types';\nimport {assert} from './utils';\nimport type {ViewState} from './widget-sources';\n\nconst DEFAULT_TILE_SIZE = 512;\nconst QUADBIN_ZOOM_MAX_OFFSET = 4;\n\nexport function getSpatialFiltersResolution(\n  source: Partial<ModelSource & AggregationOptions>,\n  viewState: ViewState\n): number | undefined {\n  const dataResolution = source.dataResolution ?? Number.MAX_VALUE;\n\n  const aggregationResLevel =\n    source.aggregationResLevel ??\n    (source.spatialDataType === 'h3'\n      ? DEFAULT_AGGREGATION_RES_LEVEL_H3\n      : DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN);\n\n  const aggregationResLevelOffset = Math.max(\n    0,\n    Math.floor(aggregationResLevel)\n  );\n\n  const currentZoomInt = Math.ceil(viewState.zoom);\n  if (source.spatialDataType === 'h3') {\n    const tileSize = DEFAULT_TILE_SIZE;\n    const maxResolutionForZoom =\n      maxH3SpatialFiltersResolutions.find(\n        ([zoom]) => zoom === currentZoomInt\n      )?.[1] ?? Math.max(0, currentZoomInt - 3);\n\n    const maxSpatialFiltersResolution = maxResolutionForZoom\n      ? Math.min(dataResolution, maxResolutionForZoom)\n      : dataResolution;\n\n    const hexagonResolution =\n      getHexagonResolution(viewState, tileSize) + aggregationResLevelOffset;\n\n    return Math.min(hexagonResolution, maxSpatialFiltersResolution);\n  }\n\n  if (source.spatialDataType === 'quadbin') {\n    const maxResolutionForZoom = currentZoomInt + QUADBIN_ZOOM_MAX_OFFSET;\n    const maxSpatialFiltersResolution = Math.min(\n      dataResolution,\n      maxResolutionForZoom\n    );\n\n    const quadsResolution =\n      Math.floor(viewState.zoom) + aggregationResLevelOffset;\n    return Math.min(quadsResolution, maxSpatialFiltersResolution);\n  }\n\n  return undefined;\n}\n\nconst maxH3SpatialFiltersResolutions = [\n  [20, 14],\n  [19, 13],\n  [18, 12],\n  [17, 11],\n  [16, 10],\n  [15, 9],\n  [14, 8],\n  [13, 7],\n  [12, 7],\n  [11, 7],\n  [10, 6],\n  [9, 6],\n  [8, 5],\n  [7, 4],\n  [6, 4],\n  [5, 3],\n  [4, 2],\n  [3, 1],\n  [2, 1],\n  [1, 0],\n];\n\n// stolen from https://github.com/visgl/deck.gl/blob/master/modules/carto/src/layers/h3-tileset-2d.ts\n\n// Relative scale factor (0 = no biasing, 2 = a few hexagons cover view)\nconst BIAS = 2;\n\n// Resolution conversion function. Takes a WebMercatorViewport and returns\n// a H3 resolution such that the screen space size of the hexagons is\n// similar\nexport function getHexagonResolution(\n  viewport: {zoom: number; latitude: number},\n  tileSize: number\n): number {\n  // Difference in given tile size compared to deck's internal 512px tile size,\n  // expressed as an offset to the viewport zoom.\n  const zoomOffset = Math.log2(tileSize / DEFAULT_TILE_SIZE);\n  const hexagonScaleFactor = (2 / 3) * (viewport.zoom - zoomOffset);\n  const latitudeScaleFactor = Math.log(\n    1 / Math.cos((Math.PI * viewport.latitude) / 180)\n  );\n\n  // Clip and bias\n  return Math.max(\n    0,\n    Math.floor(hexagonScaleFactor + latitudeScaleFactor - BIAS)\n  );\n}\n","import {executeModel} from '../models/index.js';\nimport {\n  CategoryRequestOptions,\n  CategoryResponse,\n  FeaturesRequestOptions,\n  FeaturesResponse,\n  FormulaRequestOptions,\n  FormulaResponse,\n  HistogramRequestOptions,\n  HistogramResponse,\n  RangeRequestOptions,\n  RangeResponse,\n  ScatterRequestOptions,\n  ScatterResponse,\n  TableRequestOptions,\n  TableResponse,\n  TimeSeriesRequestOptions,\n  TimeSeriesResponse,\n  ViewState,\n} from './types.js';\nimport {FilterLogicalOperator, Filter, SpatialFilter} from '../types.js';\nimport {getApplicableFilters, normalizeObjectKeys} from '../utils.js';\nimport {getClient} from '../client.js';\nimport {ModelSource} from '../models/model.js';\nimport {SourceOptions} from '../sources/index.js';\nimport {ApiVersion, DEFAULT_API_BASE_URL} from '../constants.js';\nimport {DEFAULT_TILE_RESOLUTION} from '../constants-internal.js';\nimport {getSpatialFiltersResolution} from '../spatial-index.js';\nimport {AggregationOptions} from '../sources/types.js';\n\nexport interface WidgetBaseSourceProps extends Omit<SourceOptions, 'filters'> {\n  apiVersion?: ApiVersion;\n  filters?: Record<string, Filter>;\n  filtersLogicalOperator?: FilterLogicalOperator;\n}\n\nexport type WidgetSource = WidgetBaseSource<WidgetBaseSourceProps>;\n\n/**\n * Source for Widget API requests on a data source defined by a SQL query.\n *\n * Abstract class. Use {@link WidgetQuerySource} or {@link WidgetTableSource}.\n */\nexport abstract class WidgetBaseSource<Props extends WidgetBaseSourceProps> {\n  readonly props: Props;\n\n  static defaultProps: Partial<WidgetBaseSourceProps> = {\n    apiVersion: ApiVersion.V3,\n    apiBaseUrl: DEFAULT_API_BASE_URL,\n    clientId: getClient(),\n    filters: {},\n    filtersLogicalOperator: 'and',\n  };\n\n  constructor(props: Props) {\n    this.props = {...WidgetBaseSource.defaultProps, ...props};\n  }\n\n  /**\n   * Subclasses of {@link WidgetBaseSource} must implement this method, calling\n   * {@link WidgetBaseSource.prototype._getModelSource} for common source\n   * properties, and adding additional required properties including 'type' and\n   * 'data'.\n   */\n  protected abstract getModelSource(owner: string | undefined): ModelSource;\n\n  protected _getModelSource(\n    owner?: string\n  ): Omit<ModelSource, 'type' | 'data'> {\n    const props = this.props;\n    return {\n      apiVersion: props.apiVersion as ApiVersion,\n      apiBaseUrl: props.apiBaseUrl as string,\n      clientId: props.clientId as string,\n      accessToken: props.accessToken,\n      connectionName: props.connectionName,\n      filters: getApplicableFilters(owner, props.filters),\n      filtersLogicalOperator: props.filtersLogicalOperator,\n      spatialDataType: props.spatialDataType,\n      spatialDataColumn: props.spatialDataColumn,\n      dataResolution: (props as Partial<AggregationOptions>).dataResolution,\n    };\n  }\n\n  protected _getSpatialFiltersResolution(\n    source: Omit<ModelSource, 'type' | 'data'>,\n    spatialFilter?: SpatialFilter,\n    referenceViewState?: ViewState\n  ): number | undefined {\n    // spatialFiltersResolution applies only to spatial index sources.\n    if (!spatialFilter || source.spatialDataType === 'geo') {\n      return;\n    }\n\n    if (!referenceViewState) {\n      throw new Error(\n        'Missing required option, \"spatialIndexReferenceViewState\".'\n      );\n    }\n\n    return getSpatialFiltersResolution(source, referenceViewState);\n  }\n\n  /****************************************************************************\n   * CATEGORIES\n   */\n\n  /**\n   * Returns a list of labeled datapoints for categorical data. Suitable for\n   * charts including grouped bar charts, pie charts, and tree charts.\n   */\n  async getCategories(\n    options: CategoryRequestOptions\n  ): Promise<CategoryResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {column, operation, operationColumn} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type CategoriesModelResponse = {rows: {name: string; value: number}[]};\n\n    return executeModel({\n      model: 'category',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column,\n        operation,\n        operationColumn: operationColumn || column,\n      },\n      opts: {abortController},\n    }).then((res: CategoriesModelResponse) => normalizeObjectKeys(res.rows));\n  }\n\n  /****************************************************************************\n   * FEATURES\n   */\n\n  /**\n   * Given a list of feature IDs (as found in `_carto_feature_id`) returns all\n   * matching features. In datasets containing features with duplicate geometries,\n   * feature IDs may be duplicated (IDs are a hash of geometry) and so more\n   * results may be returned than IDs in the request.\n   * @internal\n   * @experimental\n   */\n  async getFeatures(\n    options: FeaturesRequestOptions\n  ): Promise<FeaturesResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {columns, dataType, featureIds, z, limit, tileResolution} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type FeaturesModelResponse = {rows: Record<string, unknown>[]};\n\n    return executeModel({\n      model: 'pick',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        columns,\n        dataType,\n        featureIds,\n        z,\n        limit: limit || 1000,\n        tileResolution: tileResolution || DEFAULT_TILE_RESOLUTION,\n      },\n      opts: {abortController},\n      // Avoid `normalizeObjectKeys()`, which changes column names.\n    }).then(({rows}: FeaturesModelResponse) => ({rows}));\n  }\n\n  /****************************************************************************\n   * FORMULA\n   */\n\n  /**\n   * Returns a scalar numerical statistic over all matching data. Suitable\n   * for 'headline' or 'scorecard' figures such as counts and sums.\n   */\n  async getFormula(options: FormulaRequestOptions): Promise<FormulaResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      operationExp,\n      ...params\n    } = options;\n    const {column, operation} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type FormulaModelResponse = {rows: {value: number}[]};\n\n    return executeModel({\n      model: 'formula',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {column: column ?? '*', operation, operationExp},\n      opts: {abortController},\n    }).then((res: FormulaModelResponse) => normalizeObjectKeys(res.rows[0]));\n  }\n\n  /****************************************************************************\n   * HISTOGRAM\n   */\n\n  /**\n   * Returns a list of labeled datapoints for 'bins' of data defined as ticks\n   * over a numerical range. Suitable for histogram charts.\n   */\n  async getHistogram(\n    options: HistogramRequestOptions\n  ): Promise<HistogramResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {column, operation, ticks} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type HistogramModelResponse = {rows: {tick: number; value: number}[]};\n\n    const data = await executeModel({\n      model: 'histogram',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {column, operation, ticks},\n      opts: {abortController},\n    }).then((res: HistogramModelResponse) => normalizeObjectKeys(res.rows));\n\n    if (data.length) {\n      // Given N ticks the API returns up to N+1 bins, omitting any empty bins. Bins\n      // include 1 bin below the lowest tick, N-1 between ticks, and 1 bin above the highest tick.\n      const result = Array(ticks.length + 1).fill(0);\n      data.forEach(\n        ({tick, value}: {tick: number; value: number}) => (result[tick] = value)\n      );\n      return result;\n    }\n\n    return [];\n  }\n\n  /****************************************************************************\n   * RANGE\n   */\n\n  /**\n   * Returns a range (min and max) for a numerical column of matching rows.\n   * Suitable for displaying certain 'headline' or 'scorecard' statistics,\n   * or rendering a range slider UI for filtering.\n   */\n  async getRange(options: RangeRequestOptions): Promise<RangeResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {column} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type RangeModelResponse = {rows: {min: number; max: number}[]};\n\n    return executeModel({\n      model: 'range',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {column},\n      opts: {abortController},\n    }).then((res: RangeModelResponse) => normalizeObjectKeys(res.rows[0]));\n  }\n\n  /****************************************************************************\n   * SCATTER\n   */\n\n  /**\n   * Returns a list of bivariate datapoints defined as numerical 'x' and 'y'\n   * values. Suitable for rendering scatter plots.\n   */\n  async getScatter(options: ScatterRequestOptions): Promise<ScatterResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {xAxisColumn, xAxisJoinOperation, yAxisColumn, yAxisJoinOperation} =\n      params;\n\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    // Make sure this is sync with the same constant in cloud-native/maps-api\n    const HARD_LIMIT = 500;\n\n    type ScatterModelResponse = {rows: {x: number; y: number}[]};\n\n    return executeModel({\n      model: 'scatterplot',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        xAxisColumn,\n        xAxisJoinOperation,\n        yAxisColumn,\n        yAxisJoinOperation,\n        limit: HARD_LIMIT,\n      },\n      opts: {abortController},\n    })\n      .then((res: ScatterModelResponse) => normalizeObjectKeys(res.rows))\n      .then((res) => res.map(({x, y}: {x: number; y: number}) => [x, y]));\n  }\n\n  /****************************************************************************\n   * TABLE\n   */\n\n  /**\n   * Returns a list of arbitrary data rows, with support for pagination and\n   * sorting. Suitable for displaying tables and lists.\n   */\n  async getTable(options: TableRequestOptions): Promise<TableResponse> {\n    const {\n      filterOwner,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      abortController,\n      ...params\n    } = options;\n    const {columns, sortBy, sortDirection, offset = 0, limit = 10} = params;\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type TableModelResponse = {\n      rows: Record<string, number | string>[];\n      metadata: {total: number};\n    };\n\n    return executeModel({\n      model: 'table',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column: columns,\n        sortBy,\n        sortDirection,\n        limit,\n        offset,\n      },\n      opts: {abortController},\n    }).then((res: TableModelResponse) => ({\n      // Avoid `normalizeObjectKeys()`, which changes column names.\n      rows: res.rows ?? (res as any).ROWS,\n      totalCount: res.metadata?.total ?? (res as any).METADATA?.TOTAL,\n    }));\n  }\n\n  /****************************************************************************\n   * TIME SERIES\n   */\n\n  /**\n   * Returns a series of labeled numerical values, grouped into equally-sized\n   * time intervals. Suitable for rendering time series charts.\n   */\n  async getTimeSeries(\n    options: TimeSeriesRequestOptions\n  ): Promise<TimeSeriesResponse> {\n    const {\n      filterOwner,\n      abortController,\n      spatialFilter,\n      spatialFiltersMode,\n      spatialIndexReferenceViewState,\n      ...params\n    } = options;\n    const {\n      column,\n      operationColumn,\n      joinOperation,\n      operation,\n      stepSize,\n      stepMultiplier,\n      splitByCategory,\n      splitByCategoryLimit,\n      splitByCategoryValues,\n    } = params;\n\n    const source = this.getModelSource(filterOwner);\n    const spatialFiltersResolution = this._getSpatialFiltersResolution(\n      source,\n      spatialFilter,\n      spatialIndexReferenceViewState\n    );\n\n    type TimeSeriesModelResponse = {\n      rows: {name: string; value: number}[];\n      metadata: {categories: string[]};\n    };\n\n    return executeModel({\n      model: 'timeseries',\n      source: {\n        ...source,\n        spatialFiltersResolution,\n        spatialFiltersMode,\n        spatialFilter,\n      },\n      params: {\n        column,\n        stepSize,\n        stepMultiplier,\n        operationColumn: operationColumn || column,\n        joinOperation,\n        operation,\n        splitByCategory,\n        splitByCategoryLimit,\n        splitByCategoryValues,\n      },\n      opts: {abortController},\n    }).then((res: TimeSeriesModelResponse) => ({\n      rows: normalizeObjectKeys(res.rows),\n      categories: res.metadata?.categories,\n    }));\n  }\n}\n","import {\n  H3QuerySourceOptions,\n  QuadbinQuerySourceOptions,\n  VectorQuerySourceOptions,\n} from '../sources/index.js';\nimport {WidgetBaseSource, WidgetBaseSourceProps} from './widget-base-source.js';\nimport {ModelSource} from '../models/model.js';\n\ntype LayerQuerySourceOptions =\n  | Omit<VectorQuerySourceOptions, 'filters'>\n  | Omit<H3QuerySourceOptions, 'filters'>\n  | Omit<QuadbinQuerySourceOptions, 'filters'>;\n\nexport type WidgetQuerySourceResult = {widgetSource: WidgetQuerySource};\n\n/**\n * Source for Widget API requests on a data source defined by a SQL query.\n *\n * Generally not intended to be constructed directly. Instead, call\n * {@link vectorQuerySource}, {@link h3QuerySource}, or {@link quadbinQuerySource},\n * which can be shared with map layers. Sources contain a `widgetSource` property,\n * for use by widget implementations.\n *\n * Example:\n *\n * ```javascript\n * import { vectorQuerySource } from '@carto/api-client';\n *\n * const data = vectorQuerySource({\n *   accessToken: '••••',\n *   connectionName: 'carto_dw',\n *   sqlQuery: 'SELECT * FROM carto-demo-data.demo_tables.retail_stores'\n * });\n *\n * const { widgetSource } = await data;\n * ```\n */\nexport class WidgetQuerySource extends WidgetBaseSource<\n  LayerQuerySourceOptions & WidgetBaseSourceProps\n> {\n  protected override getModelSource(owner: string): ModelSource {\n    return {\n      ...super._getModelSource(owner),\n      type: 'query',\n      data: this.props.sqlQuery,\n      queryParameters: this.props.queryParameters,\n    };\n  }\n}\n","import {\n  H3TableSourceOptions,\n  QuadbinTableSourceOptions,\n  VectorTableSourceOptions,\n} from '../sources/index.js';\nimport {WidgetBaseSource, WidgetBaseSourceProps} from './widget-base-source.js';\nimport {ModelSource} from '../models/model.js';\n\ntype LayerTableSourceOptions =\n  | Omit<VectorTableSourceOptions, 'filters'>\n  | Omit<H3TableSourceOptions, 'filters'>\n  | Omit<QuadbinTableSourceOptions, 'filters'>;\n\nexport type WidgetTableSourceResult = {widgetSource: WidgetTableSource};\n\n/**\n * Source for Widget API requests on a data source defined as a table.\n *\n * Generally not intended to be constructed directly. Instead, call\n * {@link vectorTableSource}, {@link h3TableSource}, or {@link quadbinTableSource},\n * which can be shared with map layers. Sources contain a `widgetSource` property,\n * for use by widget implementations.\n *\n * Example:\n *\n * ```javascript\n * import { vectorTableSource } from '@carto/api-client';\n *\n * const data = vectorTableSource({\n *   accessToken: '••••',\n *   connectionName: 'carto_dw',\n *   tableName: 'carto-demo-data.demo_tables.retail_stores'\n * });\n *\n * const { widgetSource } = await data;\n * ```\n */\nexport class WidgetTableSource extends WidgetBaseSource<\n  LayerTableSourceOptions & WidgetBaseSourceProps\n> {\n  protected override getModelSource(owner: string): ModelSource {\n    return {\n      ...super._getModelSource(owner),\n      type: 'table',\n      data: this.props.tableName,\n    };\n  }\n}\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_AGGREGATION_RES_LEVEL_H3} from '../constants-internal';\nimport {WidgetQuerySource, WidgetQuerySourceResult} from '../widget-sources';\nimport {baseSource} from './base-source';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  QuerySourceOptions,\n  SourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n} from './types';\n\nexport type H3QuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  filters?: Record<string, unknown>;\n};\n\nexport type H3QuerySourceResponse = TilejsonResult & WidgetQuerySourceResult;\n\nexport const h3QuerySource = async function (\n  options: H3QuerySourceOptions\n): Promise<H3QuerySourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_H3,\n    sqlQuery,\n    spatialDataColumn = 'h3',\n    queryParameters,\n    filters,\n  } = options;\n\n  const spatialDataType = 'h3';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    spatialDataColumn,\n    spatialDataType,\n    q: sqlQuery,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_AGGREGATION_RES_LEVEL_H3} from '../constants-internal';\nimport {WidgetTableSource, WidgetTableSourceResult} from '../widget-sources';\nimport {baseSource} from './base-source';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types';\n\nexport type H3TableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type H3TableSourceResponse = TilejsonResult & WidgetTableSourceResult;\n\nexport const h3TableSource = async function (\n  options: H3TableSourceOptions\n): Promise<H3TableSourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_H3,\n    spatialDataColumn = 'h3',\n    tableName,\n    filters,\n  } = options;\n\n  const spatialDataType = 'h3';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source';\nimport type {\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types';\n\nexport type H3TilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type H3TilesetSourceResponse = TilejsonResult;\n\nexport const h3TilesetSource = async function (\n  options: H3TilesetSourceOptions\n): Promise<H3TilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<H3TilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source';\nimport type {\n  FilterOptions,\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types';\n\nexport type RasterSourceOptions = SourceOptions &\n  TilesetSourceOptions &\n  FilterOptions;\ntype UrlParameters = {\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type RasterSourceResponse = TilejsonResult;\n\nexport const rasterSource = async function (\n  options: RasterSourceOptions\n): Promise<RasterSourceResponse> {\n  const {tableName, filters} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  return baseSource<UrlParameters>(\n    'raster',\n    options,\n    urlParameters\n  ) as Promise<RasterSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN} from '../constants-internal';\nimport {WidgetQuerySource, WidgetQuerySourceResult} from '../widget-sources';\nimport {baseSource} from './base-source';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  QuerySourceOptions,\n  SourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n} from './types';\n\nexport type QuadbinQuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  filters?: Record<string, unknown>;\n};\n\nexport type QuadbinQuerySourceResponse = TilejsonResult &\n  WidgetQuerySourceResult;\n\nexport const quadbinQuerySource = async function (\n  options: QuadbinQuerySourceOptions\n): Promise<QuadbinQuerySourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN,\n    sqlQuery,\n    spatialDataColumn = 'quadbin',\n    queryParameters,\n    filters,\n  } = options;\n\n  const spatialDataType = 'quadbin';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    q: sqlQuery,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN} from '../constants-internal';\nimport {WidgetTableSource, WidgetTableSourceResult} from '../widget-sources';\nimport {baseSource} from './base-source';\nimport type {\n  AggregationOptions,\n  FilterOptions,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types';\n\nexport type QuadbinTableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  AggregationOptions &\n  FilterOptions;\n\ntype UrlParameters = {\n  aggregationExp: string;\n  aggregationResLevel?: string;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  name: string;\n  filters?: Record<string, unknown>;\n};\n\nexport type QuadbinTableSourceResponse = TilejsonResult &\n  WidgetTableSourceResult;\n\nexport const quadbinTableSource = async function (\n  options: QuadbinTableSourceOptions\n): Promise<QuadbinTableSourceResponse> {\n  const {\n    aggregationExp,\n    aggregationResLevel = DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN,\n    spatialDataColumn = 'quadbin',\n    tableName,\n    filters,\n  } = options;\n\n  const spatialDataType = 'quadbin';\n\n  const urlParameters: UrlParameters = {\n    aggregationExp,\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n  };\n\n  if (aggregationResLevel) {\n    urlParameters.aggregationResLevel = String(aggregationResLevel);\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source';\nimport type {\n  SourceOptions,\n  TilejsonResult,\n  TilesetSourceOptions,\n} from './types';\n\nexport type QuadbinTilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type QuadbinTilesetSourceResponse = TilejsonResult;\n\nexport const quadbinTilesetSource = async function (\n  options: QuadbinTilesetSourceOptions\n): Promise<QuadbinTilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<QuadbinTilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_TILE_RESOLUTION} from '../constants-internal.js';\nimport {\n  WidgetQuerySource,\n  WidgetQuerySourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source';\nimport type {\n  FilterOptions,\n  SourceOptions,\n  QuerySourceOptions,\n  SpatialDataType,\n  TilejsonResult,\n  ColumnsOption,\n} from './types';\n\nexport type VectorQuerySourceOptions = SourceOptions &\n  QuerySourceOptions &\n  FilterOptions &\n  ColumnsOption;\n\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  tileResolution?: string;\n  q: string;\n  queryParameters?: Record<string, unknown> | unknown[];\n  aggregationExp?: string;\n};\n\nexport type VectorQuerySourceResponse = TilejsonResult &\n  WidgetQuerySourceResult;\n\nexport const vectorQuerySource = async function (\n  options: VectorQuerySourceOptions\n): Promise<VectorQuerySourceResponse> {\n  const {\n    columns,\n    filters,\n    spatialDataColumn = 'geom',\n    sqlQuery,\n    tileResolution = DEFAULT_TILE_RESOLUTION,\n    queryParameters,\n    aggregationExp,\n  } = options;\n\n  const spatialDataType = 'geo';\n\n  const urlParameters: UrlParameters = {\n    spatialDataColumn,\n    spatialDataType,\n    tileResolution: tileResolution.toString(),\n    q: sqlQuery,\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (queryParameters) {\n    urlParameters.queryParameters = queryParameters;\n  }\n  if (aggregationExp) {\n    urlParameters.aggregationExp = aggregationExp;\n  }\n\n  return baseSource<UrlParameters>('query', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetQuerySource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n        tileResolution,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\n/* eslint-disable camelcase */\nimport {DEFAULT_TILE_RESOLUTION} from '../constants-internal.js';\nimport {\n  WidgetTableSource,\n  WidgetTableSourceResult,\n} from '../widget-sources/index.js';\nimport {baseSource} from './base-source';\nimport type {\n  FilterOptions,\n  ColumnsOption,\n  SourceOptions,\n  SpatialDataType,\n  TableSourceOptions,\n  TilejsonResult,\n} from './types';\n\nexport type VectorTableSourceOptions = SourceOptions &\n  TableSourceOptions &\n  FilterOptions &\n  ColumnsOption;\n\ntype UrlParameters = {\n  columns?: string;\n  filters?: Record<string, unknown>;\n  spatialDataType: SpatialDataType;\n  spatialDataColumn?: string;\n  tileResolution?: string;\n  name: string;\n  aggregationExp?: string;\n};\n\nexport type VectorTableSourceResponse = TilejsonResult &\n  WidgetTableSourceResult;\n\nexport const vectorTableSource = async function (\n  options: VectorTableSourceOptions\n): Promise<VectorTableSourceResponse> {\n  const {\n    columns,\n    filters,\n    spatialDataColumn = 'geom',\n    tableName,\n    tileResolution = DEFAULT_TILE_RESOLUTION,\n    aggregationExp,\n  } = options;\n\n  const spatialDataType = 'geo';\n\n  const urlParameters: UrlParameters = {\n    name: tableName,\n    spatialDataColumn,\n    spatialDataType,\n    tileResolution: tileResolution.toString(),\n  };\n\n  if (columns) {\n    urlParameters.columns = columns.join(',');\n  }\n  if (filters) {\n    urlParameters.filters = filters;\n  }\n  if (aggregationExp) {\n    urlParameters.aggregationExp = aggregationExp;\n  }\n\n  return baseSource<UrlParameters>('table', options, urlParameters).then(\n    (result) => ({\n      ...(result as TilejsonResult),\n      widgetSource: new WidgetTableSource({\n        ...options,\n        // NOTE: Parameters with default values above must be explicitly passed here.\n        spatialDataColumn,\n        spatialDataType,\n        tileResolution,\n      }),\n    })\n  );\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {baseSource} from './base-source';\nimport type {\n  SourceOptions,\n  TilesetSourceOptions,\n  TilejsonResult,\n} from './types';\n\nexport type VectorTilesetSourceOptions = SourceOptions & TilesetSourceOptions;\ntype UrlParameters = {name: string};\n\nexport type VectorTilesetSourceResponse = TilejsonResult;\n\nexport const vectorTilesetSource = async function (\n  options: VectorTilesetSourceOptions\n): Promise<VectorTilesetSourceResponse> {\n  const {tableName} = options;\n  const urlParameters: UrlParameters = {name: tableName};\n\n  return baseSource<UrlParameters>(\n    'tileset',\n    options,\n    urlParameters\n  ) as Promise<VectorTilesetSourceResponse>;\n};\n","// deck.gl\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {SOURCE_DEFAULTS} from '../sources/index';\nimport type {\n  SourceOptions,\n  QuerySourceOptions,\n  QueryResult,\n} from '../sources/types';\nimport {buildQueryUrl} from './endpoints';\nimport {requestWithParameters} from './request-with-parameters';\nimport {APIErrorContext} from './carto-api-error';\n\nexport type QueryOptions = SourceOptions & QuerySourceOptions;\ntype UrlParameters = {q: string; queryParameters?: string};\n\nexport const query = async function (\n  options: QueryOptions\n): Promise<QueryResult> {\n  const {\n    apiBaseUrl = SOURCE_DEFAULTS.apiBaseUrl,\n    clientId = SOURCE_DEFAULTS.clientId,\n    maxLengthURL = SOURCE_DEFAULTS.maxLengthURL,\n    localCache,\n    connectionName,\n    sqlQuery,\n    queryParameters,\n  } = options;\n  const urlParameters: UrlParameters = {q: sqlQuery};\n\n  if (queryParameters) {\n    urlParameters.queryParameters = JSON.stringify(queryParameters);\n  }\n\n  const baseUrl = buildQueryUrl({apiBaseUrl, connectionName});\n  const headers = {\n    Authorization: `Bearer ${options.accessToken}`,\n    ...options.headers,\n  };\n  const parameters = {client: clientId, ...urlParameters};\n\n  const errorContext: APIErrorContext = {\n    requestType: 'SQL',\n    connection: options.connectionName,\n    type: 'query',\n    source: JSON.stringify(parameters, undefined, 2),\n  };\n  return await requestWithParameters<QueryResult>({\n    baseUrl,\n    parameters,\n    headers,\n    errorContext,\n    maxLengthURL,\n    localCache,\n  });\n};\n"],"names":["client","getClient","setClient","c","FilterType","ApiVersion","DEFAULT_API_BASE_URL","FILTER_TYPES","Set","Object","values","isFilterType","type","has","getApplicableFilters","owner","filters","applicableFilters","column","filter","isApplicable","normalizeObjectKeys","el","Array","isArray","map","value","entries","reduce","acc","_ref","key","toLowerCase","assert","condition","message","Error","InvalidColumnError","constructor","NAME","name","is","error","includes","isEmptyObject","object","_","isObject","x","isPureObject","addFilter","removeFilter","_ref2","clearFilters","keys","hasFilter","_ref3","getFilter","_ref4","createViewportSpatialFilter","viewport","_isGlobalViewport","createPolygonSpatialFilter","bboxPolygon","geometry","spatialFilter","_normalizeGeometry","undefined","minx","miny","maxx","maxy","WORLD","worldClip","_clean","bboxClip","geometryTxWest","_tx","geometryTxEast","result","worldWestClip","collection","featureCollection","feature","merged","union","worldEastClip","_cleanPolygonCoords","cc","coords","length","_cleanMultiPolygonCoords","ccc","_isPolygon","coordinates","polygon","_isMultiPolygon","multiPolygon","_txContourCoords","distance","_txPolygonCoords","_txMultiPolygonCoords","cccc","getType","V3_MINOR_VERSION","DEFAULT_GEO_COLUMN","DEFAULT_MAX_LENGTH_URL","DEFAULT_TILE_RESOLUTION","DEFAULT_AGGREGATION_RES_LEVEL_H3","DEFAULT_AGGREGATION_RES_LEVEL_QUADBIN","joinPath","slice","call","arguments","part","endsWith","join","buildV3Path","apiBaseUrl","version","endpoint","buildPublicMapUrl","cartoMapId","buildStatsUrl","attribute","connectionName","source","buildSourceUrl","buildQueryUrl","CartoAPIError","errorContext","response","responseJson","responseString","status","requestType","formatErrorKey","replace","s","toUpperCase","requestWithParameters","baseUrl","parameters","headers","customHeaders","maxLengthURL","localCache","v","deck","VERSION","deckglVersion","excludeURLParameters","createCacheKey","cache","REQUEST_CACHE","canReadCache","canStoreInCache","getCacheSettings","Promise","resolve","get","url","createURLWithParameters","DEFAULT_HEADERS","fetchPromise","fetch","method","body","JSON","stringify","jsonPromise","then","_response","json","ok","catch","delete","set","e","reject","Accept","DEFAULT_REQUEST_CACHE","Map","cacheControl","parameterEntries","sort","a","b","headerEntries","_ref5","baseUrlString","URL","searchParams","toString","param","baseSource","options","urlParameters","accessToken","optionalOptions","mergedOptions","SOURCE_DEFAULTS","clientId","format","Authorization","connection","mapInstantiation","_exit","_temp2","_result","dataUrl","parseInt","_temp","boundaryQuerySource","columns","tilesetTableName","propertiesSqlQuery","queryParameters","boundaryTableSource","propertiesTableName","makeCall","opts","dealWithApiError","data","isPost","_catch","signal","abortController","otherOptions","_fetch","_response$json","column_name","msg","hint","AVAILABLE_MODELS","V3","REQUEST_GET_MAX_URL_LENGTH","executeModel","props","model","params","apiVersion","filtersLogicalOperator","spatialDataType","spatialFiltersMode","spatialFiltersResolution","queryParams","spatialDataColumn","spatialFilters","urlWithSearchParams","objectToURLSearchParams","isGet","URLSearchParams","append","String","DEFAULT_TILE_SIZE","QUADBIN_ZOOM_MAX_OFFSET","getSpatialFiltersResolution","viewState","dataResolution","Number","MAX_VALUE","aggregationResLevel","aggregationResLevelOffset","Math","max","floor","currentZoomInt","ceil","zoom","tileSize","maxResolutionForZoom","maxH3SpatialFiltersResolutions","find","maxSpatialFiltersResolution","min","hexagonResolution","getHexagonResolution","quadsResolution","BIAS","zoomOffset","log2","hexagonScaleFactor","latitudeScaleFactor","log","cos","PI","latitude","WidgetBaseSource","defaultProps","_getModelSource","_getSpatialFiltersResolution","referenceViewState","getCategories","_this","filterOwner","spatialIndexReferenceViewState","operation","operationColumn","getModelSource","res","rows","getFeatures","_this2","dataType","featureIds","z","limit","tileResolution","getFormula","_this3","operationExp","getHistogram","_this4","ticks","fill","forEach","tick","getRange","_this5","getScatter","_this6","xAxisColumn","xAxisJoinOperation","yAxisColumn","yAxisJoinOperation","HARD_LIMIT","y","getTable","_this7","sortBy","sortDirection","offset","ROWS","totalCount","metadata","total","METADATA","TOTAL","getTimeSeries","_this8","joinOperation","stepSize","stepMultiplier","splitByCategory","splitByCategoryLimit","splitByCategoryValues","categories","WidgetQuerySource","sqlQuery","WidgetTableSource","tableName","h3QuerySource","aggregationExp","q","widgetSource","h3TableSource","h3TilesetSource","rasterSource","quadbinQuerySource","quadbinTableSource","quadbinTilesetSource","vectorQuerySource","vectorTableSource","vectorTilesetSource","query"],"mappings":"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"}